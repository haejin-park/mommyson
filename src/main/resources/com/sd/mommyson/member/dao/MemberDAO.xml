<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sd.mommyson.member.dao.MemberDAO">
	<resultMap type="com.sd.mommyson.member.dto.UserDTO" id="userResultMap">
		<id property="memCode" column="MEM_CODE"/>
		<result property="name" column="NAME"/>
		<result property="repCount" column="REP_COUNT"/>
	</resultMap>

	<resultMap type="com.sd.mommyson.member.dto.ManagerDTO" id="managerResultMap">
		<id property="memCode" column="MEM_CODE"/>
		<result property="lastLogin" column="LAST_LOGIN"/>
		<association property="authDTO" resultMap="authResultMap"/>
	</resultMap>

	<resultMap type="com.sd.mommyson.member.dto.AuthDTO" id="authResultMap">
		<id property="code" column="CODE"/>
		<result property="auth" column="AUTH"/>
	</resultMap>

	<resultMap type="com.sd.mommyson.member.dto.CeoDTO" id="ceoResultMap">
		<id property="memCode" column="MEM_CODE"/>
		<result property="account" column="ACCOUNT"/>
		<result property="no" column="STORE_NO"/>
		<result property="name" column="CEO_NAME"/>
		<association property="store" resultMap="storeResultMap"/>
	</resultMap>
	
	<resultMap type="com.sd.mommyson.member.dto.StoreDTO" id="storeResultMap">
		<id property="memCode" column="MEM_CODE"/>
		<result property="storeName" column="STORE_NAME"/>
		<result property="storeImg" column="STORE_IMG"/>
		<result property="storeInfo" column="STORE_INFO"/>
		<result property="grade" column="GRADE"/>
		<result property="delCost" column="DEL_COST"/>
		<result property="workTime" column="WORK_TIME"/>
		<result property="rvCount" column="COUNT"/>
		<result property="statusYN" column="STATUS_YN"/>
	</resultMap>
	
	<resultMap type="com.sd.mommyson.member.dto.MemberDTO" id="memberResultMap">
		<id property="memCode" column="MEM_CODE"/>
		<result property="email" column="EMAIL"/>
		<result property="memPwd" column="MEM_PWD"/>
		<result property="address" column="ADDRESS"/>
		<result property="postCode" column="POST_CODE"/>
		<result property="dAddress" column="D_ADDRESS"/>
		<result property="phone" column="PHONE"/>
		<result property="memType" column="MEM_TYPE"/>
		<result property="locationCode" column="LOCATION_CODE"/>
		<result property="nickname" column="NICKNAME"/>
		<result property="memId" column="MEM_ID"/>
		<result property="enrollDate" column="ENROLL_DATE"/>
		<result property="isDeleted" column="IS_DELETED"/>
		<association property="user" resultMap="userResultMap"/>
		<association property="ceo" resultMap="ceoResultMap"/>
		<association property="manager" resultMap="managerResultMap"/>
	</resultMap>
	
	<resultMap type="com.sd.mommyson.member.dto.EmailCodeDTO" id="emailCodeResultMap">
		<id property="code" column="CODE"/>
		<result property="memCode" column="MEM_CODE"/>
		<result property="emailCode" column="EMAIL_CODE"/>
		<result property="email" column="EMAIL"/>
	</resultMap>
	
	<resultMap type="com.sd.mommyson.member.dto.LocationDTO" id="locationResultMap" extends="memberResultMap">
		<id property="locationCode" column="LOCATION_CODE"/>
		<result property="locationName" column="LOCATION_NAME"/>
	</resultMap>
	
	<resultMap type="com.sd.mommyson.owner.dto.TagDTO" id="tagResultMap">
		<id property="tagNo" column="TAG_NO"/>
		<result property="tagName" column="TAG"/>
		<result property="status" column="STATUS"/>
	</resultMap>
	
	<resultMap type="com.sd.mommyson.owner.dto.ProductDTO" id="productResultMap">
		<id property="sdCode" column="SD_CODE"/>
    	<result property="sdName" column="SD_NAME"/>
    	<result property="mDate" column="M_DATE"/>
    	<result property="price" column="PRICE"/>
    	<result property="ingredient" column="INGREDIENT"/>
    	<result property="volume" column="VOLUME"/>
    	<result property="sdImg" column="SD_IMG"/>
    	<result property="category" column="CATEGORY"/>
    	<result property="discountRate" column="DISCOUNT_RATE"/>
    	<result property="memCode" column="MEM_CODE"/>
    	<result property="orderableStatus" column="ORDERABLE_STATUS"/>
    	<result property="eDate" column="EXPIRY_DATE"/>
    	<result property="categoryCode" column="CATEGORY_CODE"/>
    	<result property="storageMethod" column="STORAGE_METHOD"/>
    	<result property="detail" column="SD_DETAIL"/>
    	<result property="isDeleted" column="IS_DELETED"/>
    	<result property="storeName" column="STORE_NAME"/>
	</resultMap>


	<select id="selectAll" resultType="_int">
		SELECT * FROM TEST
	</select>
	
	
	<select id="selectEncPassword" resultType="String">
		SELECT 
			   A.MEM_PWD
		  FROM MEMBER_TBL A
		 WHERE A.MEM_ID = #{ memId }
	</select>
	
	
	<select id="selectMember" resultMap="memberResultMap">
		SELECT 
			   A.MEM_CODE
			 , A.EMAIL
			 , A.ADDRESS
			 , A.POST_CODE
			 , A.D_ADDRESS
			 , A.PHONE
			 , A.MEM_TYPE
			 , A.LOCATION_CODE
			 , A.NICKNAME
			 , A.MEM_ID
			 , A.ENROLL_DATE
			 , A.IS_DELETED
			 , B.NAME
			 , B.REP_COUNT
			 , C.MEM_CODE
		     , C.ACCOUNT
			 , C.STORE_NO
			 , C.CEO_NAME
			 , D.STORE_IMG
			 , D.STORE_NAME
			 , D.STATUS_YN
			 , E.LAST_LOGIN
			 , E.CODE
		  FROM MEMBER_TBL A
		  LEFT JOIN USER_TBL B ON (A.MEM_CODE = B.MEM_CODE)
		  LEFT JOIN CEO_TBL C ON (A.MEM_CODE = C.MEM_CODE)
		  LEFT JOIN STORE_TBL D ON (A.MEM_CODE = D.MEM_CODE)
		  LEFT JOIN MANAGER_TBL E ON (A.MEM_CODE = E.MEM_CODE)
		 WHERE A.IS_DELETED = 'N'
		   AND A.MEM_ID = #{ memId }
	</select>
	
	
	<select id="selectLocation" resultType="hashmap">
		SELECT 
			   A.LOCATION_CODE
			 , A.LOCATION_NAME
		  FROM LOCATION A
		 WHERE A.LOCATION_CODE != 'L0'
	</select>
	
	
	<select id="selectCategoryList" resultType="hashmap">
		SELECT 
			   A.CATEGORY_CODE
			 , A.CATEGORY_NAME
		  FROM CATEGORY_TBL A
		 WHERE A.STATUS = 'Y'
	</select>
	
	
	<select id="selectOwner" resultMap="memberResultMap">
		SELECT
		     	A.MEM_CODE
		     ,  A.ADDRESS
		     ,  A.POST_CODE
		     ,  A.D_ADDRESS
		     ,  A.PHONE
		     ,  A.LOCATION_CODE
		     ,  A.NICKNAME
		     ,  B.ACCOUNT
		     ,  B.STORE_NO
		     ,  B.CEO_NAME
		     ,  C.STORE_NAME
		     ,  C.STORE_IMG
		     ,  C.STORE_INFO
		     ,  C.WORK_TIME
		  FROM  MEMBER_TBL A
		  LEFT  JOIN CEO_TBL B ON(A.MEM_CODE = B.MEM_CODE)
		  LEFT  JOIN STORE_TBL C ON(B.MEM_CODE = C.MEM_CODE)
	     WHERE  A.IS_DELETED = 'N'
		   AND  A.MEM_ID = #{ memId }
    </select>
    
    
	<select id="selectManagers" parameterType="string" resultMap="memberResultMap">
		SELECT
			   A.MEM_CODE
			 , A.MEM_ID
			 , A.ENROLL_DATE
			 , B.LAST_LOGIN
			 , C.AUTH
		  FROM MEMBER_TBL A
		  LEFT JOIN MANAGER_TBL B ON(A.MEM_CODE = B.MEM_CODE)
		  LEFT JOIN AUTH_TBL C ON (B.CODE = C.CODE)
		 WHERE A.MEM_ID != #{ memId }
		   AND A.MEM_TYPE = 'manager'
		   AND A.IS_DELETED = 'N'
	</select>
	
	
	<!-- 아이디 중복 검사 -->
	<select id="idChk" resultType="int">
		SELECT COUNT(*) 
	      FROM MEMBER_TBL
	     WHERE MEM_ID = #{memId} 
	</select>
	
	
	<!-- 이메일 중복검사 -->
	<select id="emailChk" resultType="int">
		SELECT COUNT(*)
		  FROM MEMBER_TBL
		 WHERE EMAIL = #{ email } 
	</select>
	
	
	<!--  회원가입 이메일 인증 번호 전송 버튼을 눌러 이메일 주소와 인증번호와 저장 -->
	<insert id ="registEmailCode" parameterType="hashMap">
		INSERT 
		  INTO EMAIL_CODE_TBL
		(
		  CODE			
		, MEM_CODE
		, EMAIL_CODE
		, EMAIL
		)
		VALUES
		(
		  SEQ_CODE.NEXTVAL
		, null
		, #{ num }
		, #{ toMail }
		)
	</insert>


	<!-- 회원가입할 때 전송버튼 눌러 데이터베이스에 저장한 이메일 인증번호 조회해서 일치 여부 확인 -->
	<select id="codeCheck" resultType="String">
		SELECT EMAIL
		  FROM EMAIL_CODE_TBL
		 WHERE EMAIL_CODE = #{ inputCode } 
	</select>


	<!-- 지역코드 조회 -->
	<select id="locationCode" resultType="String">
		SELECT A.LOCATION_CODE
		  FROM LOCATION A
		 WHERE A.LOCATION_NAME = #{ locationName }
	</select>
	

	<!-- 소비자 회원가입 -->
 	<insert id="customerJoin">
		INSERT ALL
		  INTO MEMBER_TBL
		VALUES
		( 
   		  SEQ_MEM_CODE.NEXTVAL
		, #{ email }
		, #{ memPwd }
		, #{ address }
		, #{ postCode }
		, #{ dAddress }
		, #{ phone }
		, 'user'
		, #{ locationCode }
		, #{ nickname }
		, #{ memId }
		, SYSDATE	
		, 'N'	
		)
		INTO USER_TBL 
		VALUES
		( 
		  SEQ_MEM_CODE.CURRVAL
		, #{ user.name }
		, 0
		)
		SELECT * FROM DUAL
	</insert>
	
	<!-- 사업자 회원가입 -->
 	<insert id="businessJoin" parameterType="hashmap">
		INSERT ALL
		  INTO MEMBER_TBL
		VALUES
		( 
   		  SEQ_MEM_CODE.NEXTVAL
		, #{ member.email }
		, #{ member.memPwd }
		, #{ member.address }
		, #{ member.postCode }
		, #{ member.dAddress }
		, #{ member.phone }
		, 'ceo'
		, #{ member.locationCode }
		, null
		, #{ member.memId }
		, SYSDATE	
		, 'N'	
		)
		INTO CEO_TBL 
		VALUES
		( 
		  SEQ_MEM_CODE.CURRVAL
		, #{ member.ceo.account }
		, #{ member.ceo.no }
		, #{ member.ceo.name }
		)
		INTO STORE_TBL
		VALUES
		(
  		  #{ store.storeName }
		, #{ fileName }
		, null
		, null
		, null
		, null
		, SEQ_MEM_CODE.CURRVAL
		,'Y'
		)
		SELECT * FROM DUAL
	</insert>
	
	<!-- 사용자 회원가입 성공하면 MEMBER_TBL 에서 가장 최근에 저장된 code 조회 -->
 	<select id="selectCode" resultType="_int">
		  SELECT CODE
	      FROM (
			    SELECT CODE 
			      FROM EMAIL_CODE_TBL 
			     ORDER BY CODE DESC
			    )
	     WHERE ROWNUM = 1
	</select> 
	

	<!-- 회원가입 성공할 경우 멤버 테이블에서 가장 최근에 가입한 사용자의 email 조회 -->
	<select id="selectEmail" resultType="String">
	    SELECT EMAIL
	      FROM (
			    SELECT EMAIL
			      FROM MEMBER_TBL 
			     ORDER BY ENROLL_DATE DESC
			    )
	     WHERE ROWNUM = 1
	</select>
	

	<!-- 회원가입 성공할 경우 이메일 인증 테이블에서 가장 최근에 만들어진 code를 조회해서 일치하는 email을 업데이트 -->
 	<update id="updateEmail" parameterType="EmailCodeDTO">
 		UPDATE EMAIL_CODE_TBL 
		   SET EMAIL = #{ email }
		 WHERE CODE = #{ code }     
	</update>   
	

	<!-- 회원가입 성공할 경우 멤버 테이블에서 가장 최근에 가입한 사용자의 memCode 조회 -->
	<select id="selectMemCode" resultType="_int">
	    SELECT MEM_CODE 
	      FROM (
			    SELECT MEM_CODE 
			      FROM MEMBER_TBL 
			     ORDER BY ENROLL_DATE DESC
			    )
	     WHERE ROWNUM = 1
	</select>


	<!-- 회원가입 성공할 경우 이메일 인증 테이블에서 가장 최근에 만들어진 code를 조회해서 이메일 인증 테이블 memCode 업데이트 -->
 	<update id="updateMemCode" parameterType="EmailCodeDTO">
 		UPDATE EMAIL_CODE_TBL 
		   SET MEM_CODE = #{ memCode }       
		 WHERE CODE = #{ code }   
	</update>   
	

	<!-- 아이디 찾기 -->
	<select id="findIdCheck" resultType="String">
		SELECT MEM_ID
		  FROM MEMBER_TBL A
		  JOIN USER_TBL B ON(A.MEM_CODE = B.MEM_CODE)
		 WHERE A.EMAIL = #{ email }
	</select>
	
	
	<!--비밀번호 찾기(변경 화면으로 이동 하기 전단계) 이메일 인증-->
	<update id ="updateEmailCode" parameterType="hashMap">
		UPDATE EMAIL_CODE_TBL
		   SET EMAIL_CODE = #{ emailCode }
	     WHERE EMAIL = #{ email }
	</update> 
	
	
	<!--이메일 인증 번호 조회 -->
	<select id="selectEmailCode" resultType="_int">
		SELECT EMAIL_CODE
		  FROM EMAIL_CODE_TBL
		 WHERE EMAIL = #{ email } 
	</select>
	
	
 	<!-- 비밀번호 변경하기 -->
 	<update id="modifyPwd" parameterType="hashMap">
 		UPDATE MEMBER_TBL
 		   SET MEM_PWD = #{ encode }
 		 WHERE EMAIL = #{ email } 
 	</update>
	
	<select id="selectTagList" resultMap="tagResultMap">
		SELECT
			   A.TAG_NO
			 , A.TAG
			 , A.STATUS
		  FROM TAGS_TBL A
		 WHERE A.STATUS = 'Y'
	</select> 
	

	
	<select id="selectProductList" resultMap="productResultMap">
		SELECT
    		   A.SD_CODE
    		 , A.SD_IMG
    		 , A.SD_NAME
    		 , A.SD_DETAIL
    		 , A.DISCOUNT_RATE
    		 , A.PRICE
    		 , A.ORDERABLE_STATUS
    		 , A.MEM_CODE
    		 , A.VOLUME
    		 , B.STORE_NAME
    	  FROM PRODUCT_TBL A
    	  JOIN STORE_TBL B ON(A.MEM_CODE = B.MEM_CODE)
    	 WHERE A.ORDERABLE_STATUS = 'Y'
    	   AND A.IS_DELETED = 'N'
    	   AND A.EXPIRY_DATE <![CDATA[ >=  ]]> SYSDATE
	</select>
	
	<select id="selectHotKeywordList" resultMap="tagResultMap">
		SELECT
			   A.HOT_NO AS TAG_NO
			 , A.HOT_CONTENT AS TAG
		  FROM HOT_TBL A
		 WHERE A.TAG_NO IS NOT null
	</select> 
	
	<select id="selectStoreList" resultMap="storeResultMap">
		SELECT
			   A.MEM_CODE
			 , A.STORE_NAME
			 , A.STORE_IMG
			 , A.GRADE
			 , (SELECT COUNT(*) FROM REVIEW_TBL R JOIN ORDER_TBL O ON(R.ORDER_CODE = O.ORDER_CODE) WHERE O.STORE_CODE = A.MEM_CODE) AS COUNT
		  FROM STORE_TBL A
		  LEFT JOIN MEMBER_TBL M ON(A.MEM_CODE = M.MEM_CODE)
		 WHERE M.IS_DELETED = 'N'
		 ORDER BY M.ENROLL_DATE DESC
	</select>
	
	<update id="updateLastLogin">
		UPDATE MANAGER_TBL
		   SET LAST_LOGIN = SYSTIMESTAMP
		 WHERE MEM_CODE = (SELECT MEM_CODE FROM MEMBER_TBL WHERE MEM_ID = #{ memId })
	</update>
	
	<resultMap type="com.sd.mommyson.member.dto.RTNoticeDTO" id="noticeResultMap">
		<id property="noticeCode" column="NOTICE_CODE"/>
		<result property="memCode" column="MEM_CODE"/>
		<result property="noticeContent" column="NOTICE_CONTENTS"/>
		<result property="noticeTime" column="NOTICE_TIME"/>
	</resultMap>
	
	<select id="selectRTNotice" resultMap="noticeResultMap">
		SELECT * FROM RT_NOTICE_TBL WHERE MEM_CODE = #{ memCode }
	</select>
	
	<delete id="deleteNotice">
		DELETE FROM RT_NOTICE_TBL WHERE NOTICE_CODE = #{ noticeCode }
	</delete>
	
	<select id="selectCartCount" resultType="_int">
		SELECT COUNT(*) FROM CART_TBL WHERE MEM_CODE = #{ memCode }
	</select>
	
	<resultMap type="com.sd.mommyson.manager.dto.BannerDTO" id="bannerResultMap">
		<id property="bnCode" column="BANER_CODE"/>
		<result property="bnName" column="BANER_NAME"/>
		<result property="bnImg" column="BANER_IMG"/>
		<result property="bnStatus" column="STATUS"/>
		<result property="bnOrder" column="BANER_ORDER"/>
	</resultMap>
	
	<select id="selectBanners" resultMap="bannerResultMap">
		SELECT
			   A.BANER_CODE
			 , A.BANER_NAME
			 , A.BANER_IMG
			 , A.STATUS
			 , A.BANER_ORDER
		  FROM BANER_TBL A
		 WHERE A.STATUS = 'Y'
		 ORDER BY A.BANER_ORDER ASC
	</select>
</mapper>